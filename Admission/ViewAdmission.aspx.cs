using System;
using System.Collections;
using System.Data;
using System.IO;
using System.Text;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;

public partial class Admission_ViewAdmission : System.Web.UI.Page
{
    #region Declaration

    Admission_BLogic oAdmission_BLogic;
    Admission oAdmission;
    AdmissionPipeline oAdmissionPipeline;

    Document_BLogic oDocument_BLogic;
    MailDocument oDocument;

    Template_BLogic oTemplate_BLogic;
    Template oTemplate;

    #endregion

    #region Properties

    string SortDirection
    {
        get
        {
            object o = this.ViewState["SortDirection"];
            if (o == null)
            {
                return string.Empty;
            }
            else
            {
                return (string)o;
            }
        }

        set
        {
            this.ViewState["SortDirection"] = value;
        }
    }
    string SortField
    {
        get
        {
            object o = this.ViewState["SortField"];
            if (o == null)
            {
                return string.Empty;
            }
            else
            {
                return (string)o;
            }
        }

        set
        {
            this.ViewState["SortField"] = value;
        }
    }

    string _TemplateName;
    ArrayList _DocumentList = new ArrayList();
    ArrayList _DocumentFileList = new ArrayList();
    ArrayList _AutoGeneratedDocumentList = new ArrayList();

    public string TemplateName
    {
        get { return _TemplateName; }
        set { _TemplateName = value; }
    }
    public ArrayList DocumentList
    {
        get { return _DocumentList; }
        set { _DocumentList = value; }
    }
    public ArrayList DocumentFileList
    {
        get { return _DocumentFileList; }
        set { _DocumentFileList = value; }
    }
    public ArrayList AutoGeneratedDocumentList
    {
        get { return _AutoGeneratedDocumentList; }
        set { _AutoGeneratedDocumentList = value; }
    }


    public string InteractionDate = string.Empty;
    public string InteractionTime = string.Empty;

    #endregion

    #region PageLoad

    protected void Page_Load(object sender, EventArgs e)
    {
        if (!Page.IsPostBack)
        {
            BindAdmissionGrid("");
            BindTemplateGrid();
            BindDocumentGrid();
        }
    }

    #endregion

    #region Control Event

    /// <summary>
    /// Fire event when chage dropdown selection from pagination
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    /// 
    protected void ddlPageSelector_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            this.GvAdmission.PageIndex = ((DropDownList)sender).SelectedIndex;
            this.BindAdmissionGrid("");
        }
        catch (Exception ex)
        {
            WebMsg.Show(ex.Message);
        }

    }

    /// <summary>
    /// Fire when page index changing
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    protected void GvAdmission_PageIndexChanging(object sender, GridViewPageEventArgs e)
    {
        try
        {
            DropDownList DDLSelectPage = (DropDownList)this.GvAdmission.BottomPagerRow.FindControl("ddlPageSelector");
            DDLSelectPage.SelectedIndex = e.NewPageIndex;
            this.GvAdmission.PageIndex = e.NewPageIndex;
            this.BindAdmissionGrid("");
        }
        catch (Exception ex)
        {
            WebMsg.Show(ex.Message);
        }
    }

    /// <summary>
    /// GridView sorting event
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    protected void GvAdmission_Sorting(object sender, GridViewSortEventArgs e)
    {
        try
        {
            if (e.SortExpression.Trim() == this.SortField)
            {
                this.SortDirection = this.SortDirection == "descending" ? "ascending" : "descending";
            }
            else
            {
                this.SortDirection = "ascending";
            }

            this.SortField = e.SortExpression;
            this.BindAdmissionGrid("");
        }
        catch (Exception ex)
        {
            WebMsg.Show(ex.Message);
        }
    }

    /// <summary>
    /// Event fire on pagination row created
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    protected void GvAdmission_RowCreated(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.Pager)
        {
            GridViewOperations GrvOperation = new GridViewOperations();
            GrvOperation.SetPagerButtonStates(GvAdmission, e.Row, this.Page);
        }
    }


    /// <summary>
    /// RowDataBound of GvAdmission grid
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    protected void GvAdmission_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            string AdmissionStatus = Convert.ToString(DataBinder.Eval(e.Row.DataItem, "AdmissionStatus"));
            if (string.IsNullOrEmpty(AdmissionStatus))
            {
                HtmlGenericControl dvconfirm = (HtmlGenericControl)e.Row.FindControl("dvconfirm");
                dvconfirm.Visible = false;
            }
            else if (AdmissionStatus == "Interaction")
            {
                HtmlGenericControl dvSend = (HtmlGenericControl)e.Row.FindControl("dvSend");
                dvSend.Visible = false;
            }
            Label LblStatus = (Label)e.Row.FindControl("LblAdmissionStatus");
            if (string.IsNullOrEmpty(LblStatus.Text))
                LblStatus.Text = "Not Started";
        }
    }

    /// <summary>
    /// Interaction slip send button click event
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    protected void btnSend_Click(object sender, EventArgs e)
    {
        if (!string.IsNullOrEmpty(hdnAdmissionID.Value))
        {
            foreach (GridViewRow row in gvtemplate.Rows)
            {
                RadioButton Rb = (RadioButton)row.FindControl("Rbtemplate");
                if (Rb.Checked)
                {
                    Label LblTemplateName = (Label)row.FindControl("GV_LblTemplateName");
                    TemplateName = LblTemplateName.Text;
                }
            }
            foreach (GridViewRow row in GvDocument.Rows)
            {
                CheckBox chk = (CheckBox)row.FindControl("chkdocument");
                if (chk.Checked)
                {
                    Label LblDocumentName = (Label)row.FindControl("GV_LblDocumentName");
                    DocumentList.Add(LblDocumentName.Text);
                }
            }

            string InteractionDateTime = string.Empty;
            string FeedBack = string.Empty;
            string Remarks = string.Empty;

            string MailFrom = EmailUtility.SMTPEmailAddress;
            string MailTo = hdnEmailID.Value;
            string MailSubject = string.Empty;
            string MailBody = string.Empty;
            string FailiurReason = string.Empty;
            ArrayList ArrMailTo = new ArrayList();

            switch (hdnAdmissionStatus.Value)
            {
                case "Interaction":

                    InteractionDate = TxtDate.Text.Trim();
                    InteractionTime = TxtTime.Text.Trim();
                    InteractionDateTime = TxtDate.Text.Trim() + " " + TxtTime.Text.Trim();

                    DocumentFileList = GenerateDocument(DocumentList, hdnAdmissionID.Value);
                    GetMailSubjectAndBody(TemplateName, out MailSubject, out MailBody);

                    #region Insert in AdmissionPipeline

                    oAdmission_BLogic = new Admission_BLogic();
                    oAdmissionPipeline = new AdmissionPipeline();

                    oAdmissionPipeline.AdmissionId = hdnAdmissionID.Value;
                    oAdmissionPipeline.AdmissionStatus = hdnAdmissionStatus.Value;
                    oAdmissionPipeline.InteractionTime = InteractionDateTime;
                    oAdmissionPipeline.FeedBack = null;
                    oAdmissionPipeline.Remarks = null;
                    oAdmissionPipeline.GeneratedDocumentCount = Convert.ToString(AutoGeneratedDocumentList.Count);
                    oAdmissionPipeline.MailFrom = MailFrom;
                    oAdmissionPipeline.MailTo = MailTo;
                    oAdmissionPipeline.MailSubject = MailSubject;
                    oAdmissionPipeline.MailBody = MailBody;
                    oAdmissionPipeline.MailDocument = (!string.IsNullOrEmpty(GetMailDocumentString(AutoGeneratedDocumentList))) ? GetMailDocumentString(AutoGeneratedDocumentList) : null;
                    oAdmissionPipeline.IsSendSuccess = false;
                    oAdmissionPipeline.FailureReasons = null;
                    oAdmissionPipeline.CreatedBy = Convert.ToString(AppSessions.EmpolyeeID);

                    bool IsInsert = oAdmission_BLogic.AdmissionPipeline_Insert(oAdmissionPipeline);

                    #endregion

                    if (IsInsert)
                    {
                        ArrMailTo.Add(MailTo);
                        bool IsSendSuccess = EmailUtility.SendEmail(ArrMailTo, MailSubject, MailBody, out FailiurReason, DocumentFileList);

                        #region Update Mail Status

                        oAdmission_BLogic = new Admission_BLogic();
                        oAdmissionPipeline = new AdmissionPipeline();

                        oAdmissionPipeline.AdmissionId = hdnAdmissionID.Value;
                        oAdmissionPipeline.AdmissionStatus = hdnAdmissionStatus.Value;
                        oAdmissionPipeline.IsSendSuccess = IsSendSuccess;
                        oAdmissionPipeline.FailureReasons = (!string.IsNullOrEmpty(FailiurReason)) ? FailiurReason : null;

                        oAdmission_BLogic.AdmissionPipeline_UpdateMailStatus(oAdmissionPipeline);

                        #endregion

                        if (IsSendSuccess)
                            WebMsg.Show("Interaction slip sent successfully.");
                        else
                            WebMsg.Show("Interaction slip sent failed.");
                    }
                    else
                    {
                        WebMsg.Show("Send Admission in pipeline failed.");
                    }
                    break;

                case "confirm":

                    FeedBack = TxtFeedBack.InnerText;
                    Remarks = TxtRemarks.InnerText;

                    DocumentFileList = GenerateDocument(DocumentList, hdnAdmissionID.Value);
                    GetMailSubjectAndBody(TemplateName, out MailSubject, out MailBody);

                    #region Insert in AdmissionPipeline

                    oAdmission_BLogic = new Admission_BLogic();
                    oAdmissionPipeline = new AdmissionPipeline();

                    oAdmissionPipeline.AdmissionId = hdnAdmissionID.Value;
                    oAdmissionPipeline.AdmissionStatus = hdnAdmissionStatus.Value;
                    oAdmissionPipeline.InteractionTime = null;
                    oAdmissionPipeline.FeedBack = FeedBack;
                    oAdmissionPipeline.Remarks = Remarks;
                    oAdmissionPipeline.GeneratedDocumentCount = Convert.ToString(AutoGeneratedDocumentList.Count);
                    oAdmissionPipeline.MailFrom = MailFrom;
                    oAdmissionPipeline.MailTo = MailTo;
                    oAdmissionPipeline.MailSubject = MailSubject;
                    oAdmissionPipeline.MailBody = MailBody;
                    oAdmissionPipeline.MailDocument = (!string.IsNullOrEmpty(GetMailDocumentString(AutoGeneratedDocumentList))) ? GetMailDocumentString(AutoGeneratedDocumentList) : null;
                    oAdmissionPipeline.IsSendSuccess = false;
                    oAdmissionPipeline.FailureReasons = null;
                    oAdmissionPipeline.CreatedBy = Convert.ToString(AppSessions.EmpolyeeID);

                    IsInsert = oAdmission_BLogic.AdmissionPipeline_Insert(oAdmissionPipeline);

                    #endregion

                    if (IsInsert)
                    {
                        ArrMailTo.Add(MailTo);

                        bool IsSendSuccess = EmailUtility.SendEmail(ArrMailTo, MailSubject, MailBody, out FailiurReason, DocumentFileList);

                        #region Update Mail Status

                        oAdmission_BLogic = new Admission_BLogic();
                        oAdmissionPipeline = new AdmissionPipeline();

                        oAdmissionPipeline.AdmissionId = hdnAdmissionID.Value;
                        oAdmissionPipeline.AdmissionStatus = hdnAdmissionStatus.Value;
                        oAdmissionPipeline.IsSendSuccess = IsSendSuccess;
                        oAdmissionPipeline.FailureReasons = (!string.IsNullOrEmpty(FailiurReason)) ? FailiurReason : null; ;

                        oAdmission_BLogic.AdmissionPipeline_UpdateMailStatus(oAdmissionPipeline);

                        #endregion

                        if (IsSendSuccess)
                            WebMsg.Show("Admission is confirmed.");
                        else if (IsSendSuccess)
                            WebMsg.Show("Admission confirm failed.");

                    }
                    else
                    {
                        WebMsg.Show("Send Admission in pipeline failed.");
                    }
                    break;

                case "onhold":

                    FeedBack = TxtFeedBack.InnerText;
                    Remarks = TxtRemarks.InnerText;

                    #region Insert in AdmissionPipeline

                    oAdmission_BLogic = new Admission_BLogic();
                    oAdmissionPipeline = new AdmissionPipeline();

                    oAdmissionPipeline.AdmissionId = hdnAdmissionID.Value;
                    oAdmissionPipeline.AdmissionStatus = hdnAdmissionStatus.Value;
                    oAdmissionPipeline.InteractionTime = null;
                    oAdmissionPipeline.FeedBack = FeedBack;
                    oAdmissionPipeline.Remarks = Remarks;
                    oAdmissionPipeline.GeneratedDocumentCount = Convert.ToString(AutoGeneratedDocumentList.Count);
                    oAdmissionPipeline.MailFrom = null;
                    oAdmissionPipeline.MailTo = null;
                    oAdmissionPipeline.MailSubject = null;
                    oAdmissionPipeline.MailBody = null;
                    oAdmissionPipeline.MailDocument = (!string.IsNullOrEmpty(GetMailDocumentString(AutoGeneratedDocumentList))) ? GetMailDocumentString(AutoGeneratedDocumentList) : null;
                    oAdmissionPipeline.IsSendSuccess = false;
                    oAdmissionPipeline.FailureReasons = null;
                    oAdmissionPipeline.CreatedBy = Convert.ToString(AppSessions.EmpolyeeID);

                    IsInsert = oAdmission_BLogic.AdmissionPipeline_Insert(oAdmissionPipeline);

                    #endregion

                    if (IsInsert)
                        WebMsg.Show("Admission is on hold.");
                    else
                        WebMsg.Show("Admission onhold failed.");

                    break;
                case "reject":

                    FeedBack = TxtFeedBack.InnerText;
                    Remarks = TxtRemarks.InnerText;

                    #region Insert in AdmissionPipeline

                    oAdmission_BLogic = new Admission_BLogic();
                    oAdmissionPipeline = new AdmissionPipeline();

                    oAdmissionPipeline.AdmissionId = hdnAdmissionID.Value;
                    oAdmissionPipeline.AdmissionStatus = hdnAdmissionStatus.Value;
                    oAdmissionPipeline.InteractionTime = null;
                    oAdmissionPipeline.FeedBack = FeedBack;
                    oAdmissionPipeline.Remarks = Remarks;
                    oAdmissionPipeline.GeneratedDocumentCount = Convert.ToString(AutoGeneratedDocumentList.Count);
                    oAdmissionPipeline.MailFrom = null;
                    oAdmissionPipeline.MailTo = null;
                    oAdmissionPipeline.MailSubject = null;
                    oAdmissionPipeline.MailBody = null;
                    oAdmissionPipeline.MailDocument = (!string.IsNullOrEmpty(GetMailDocumentString(AutoGeneratedDocumentList))) ? GetMailDocumentString(AutoGeneratedDocumentList) : null;
                    oAdmissionPipeline.IsSendSuccess = false;
                    oAdmissionPipeline.FailureReasons = null;
                    oAdmissionPipeline.CreatedBy = Convert.ToString(AppSessions.EmpolyeeID);

                    IsInsert = oAdmission_BLogic.AdmissionPipeline_Insert(oAdmissionPipeline);

                    #endregion

                    if (IsInsert)
                        WebMsg.Show("Admission is rejected.");
                    else
                        WebMsg.Show("Admission reject failed.");

                    break;
                default:
                    break;
            }
            BindAdmissionGrid("");
        }
        else
        {
            WebMsg.Show("Please reload page and try again.");
        }
    }

    /// <summary>
    /// Interaction slip send button click event with preview
    /// </summary> 
    /// <param name="sender"></param>
    /// <param name="e"></param>
    protected void btnPreviewSend_Click(object sender, EventArgs e)
    {

    }

    /// <summary>
    /// Submit Button from onhold and reject status
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    protected void btnSubmit_Click(object sender, EventArgs e)
    {
        btnSend_Click(null, null);
    }

    #endregion

    #region User Define Function

    /// <summary>
    /// Bind Admission Grid
    /// </summary>
    private void BindAdmissionGrid(string status)
    {
        oAdmission = new Admission();
        oAdmission_BLogic = new Admission_BLogic();

        DataSet ods = oAdmission_BLogic.Admission_Select_All(oAdmission);

        GridViewOperations GrvOperation = new GridViewOperations();
        GrvOperation.BindGridWithSorting(this.GvAdmission, ods, this.SortField, this.SortDirection);
    }

    /// <summary>
    /// Bind Select Template Grid
    /// </summary>
    private void BindTemplateGrid()
    {
        oTemplate_BLogic = new Template_BLogic();
        oTemplate = new Template();

        oTemplate.Templatepath = Server.MapPath("~/Template");

        gvtemplate.DataSource = oTemplate_BLogic.BAL_Template_SelectALL(oTemplate);
        gvtemplate.DataBind();
    }

    /// <summary>
    /// Bind Select Document Grid
    /// </summary>
    private void BindDocumentGrid()
    {
        oDocument_BLogic = new Document_BLogic();
        oDocument = new MailDocument();

        oDocument.Documentpath = Server.MapPath("~/Documents/AdmissionDocument");

        GvDocument.DataSource = oDocument_BLogic.BAL_Document_SelectALL(oDocument);
        GvDocument.DataBind();
    }

    /// <summary>
    /// Generate Document And Add it in list.
    /// </summary>
    /// <param name="documentList"></param>
    /// <param name="admissionId"></param>
    /// <returns></returns>
    private ArrayList GenerateDocument(ArrayList documentList, string admissionId)
    {
        ArrayList FileList = new ArrayList();

        oAdmission = new Admission();
        oAdmission_BLogic = new Admission_BLogic();

        oAdmission.AdmissionId = admissionId;

        ViewState["AdmissionStudentData"] = oAdmission_BLogic.Admission_Select_ByAdmissionId(oAdmission);
        ViewState["TagMasterData"] = oAdmission_BLogic.AdmissionTagMaster_Select_All();

        foreach (string filename in DocumentList)
        {
            oDocument_BLogic = new Document_BLogic();
            oDocument = new MailDocument();
            oDocument.Documentpath = Server.MapPath("~/Documents/AdmissionDocument");
            oDocument.Title = Convert.ToString(filename);

            StringBuilder WordContent = new StringBuilder();

            if (oDocument_BLogic.BAL_Document_CheckExists(oDocument))
            {
                DataTable oTable = oDocument_BLogic.BAL_Document_Select(oDocument);

                string title = Convert.ToString(oTable.Rows[0]["title"]);
                string body = Convert.ToString(oTable.Rows[0]["body"]);

                body = ReplaceTag(body);

                WordContent.Append("<html "
                    + "xmlns:o='urn:schemas-microsoft-com:office:office' "
                    + "xmlns:w='urn:schemas-microsoft-com:office:word'"
                    + "xmlns='http://www.w3.org/TR/REC-html40'>"
                    + "<head><title>Time</title>");

                WordContent.Append("<!--[if gte mso 9]>"
                    + "<xml>"
                    + "<w:WordDocument>"
                    + "<w:View>Print</w:View>"
                    + "<w:Zoom>90</w:Zoom>"
                    + "<w:DoNotOptimizeForBrowser/>"
                    + "</w:WordDocument>"
                    + "</xml>"
                    + "<![endif]-->");

                WordContent.Append("<style>"
                    + "<!-- /* Style Definitions */"
                    + "@page Section1"
                    + "   {size:8.5in 11.0in; "
                    + "   margin:0.6in 0.6in 0.6in 0.6in ; "
                    + "   mso-header-margin:.1in; "
                    + "   mso-footer-margin:.1in; mso-paper-source:0;}"
                    + " div.Section1"
                    + "   {page:Section1;}"
                    + "-->"
                    + "</style></head>");

                WordContent.Append("<body lang=EN-US style='tab-interval:.5in'>"
                    + "<div class=Section1>"
                    + body
                    + "</div></body></html>");

                string AutoGenerateDocumentPath = Server.MapPath("~/Documents/AutoGeneratedAdmissionDocument");

                using (TextWriter writer = File.CreateText(Path.Combine(AutoGenerateDocumentPath, title + "_" + admissionId + ".doc")))
                {
                    writer.Write(Convert.ToString(WordContent));
                }
                FileList.Add(Path.Combine(AutoGenerateDocumentPath, title + "_" + admissionId + ".doc"));
                AutoGeneratedDocumentList.Add(string.Format("{0}/{1}", "../Documents/AutoGeneratedAdmissionDocument", title + "_" + admissionId + ".doc"));
            }
        }
        return FileList;
    }

    /// <summary>
    /// Replace Tag from template and document.
    /// </summary>
    /// <param name="body"></param>
    /// <returns></returns>
    private string ReplaceTag(string body)
    {
        StringBuilder WordContent = new StringBuilder(body);

        DataSet odsData = (DataSet)ViewState["AdmissionStudentData"];
        DataSet odsTag = (DataSet)ViewState["TagMasterData"];

        foreach (DataRow dr in odsTag.Tables[0].Rows)
        {
            if (Convert.ToString(dr["ValueField"]) != "InteractionDate" && Convert.ToString(dr["ValueField"]) != "InteractionTime" && Convert.ToString(dr["ValueField"]) != "CurrentDate")
                WordContent.Replace(Convert.ToString(dr["DisplayTag"]), Convert.ToString(odsData.Tables[0].Rows[0][Convert.ToString(dr["ValueField"])]));
        }

        WordContent.Replace("@@CurrentDate@@", DateTime.Now.ToString("dd, MMMM yyyy"));
        WordContent.Replace("@@InteractionDate@@", InteractionDate);
        WordContent.Replace("@@InteractionTime@@", InteractionTime);

        return Convert.ToString(WordContent);
    }

    /// <summary>
    /// Get Mail Subject and Body for selected template.
    /// </summary>
    /// <param name="TemplateName">Template title</param> 
    /// <param name="MailSubject"></param>
    /// <param name="MailBody"></param>
    private void GetMailSubjectAndBody(string TemplateName, out string MailSubject, out string MailBody)
    {
        MailSubject = string.Empty;
        MailBody = string.Empty;

        oTemplate_BLogic = new Template_BLogic();
        oTemplate = new Template();
        oTemplate.Templatepath = Server.MapPath("~/Template");
        oTemplate.Title = TemplateName;

        if (oTemplate_BLogic.BAL_Template_CheckExists(oTemplate))
        {
            DataTable oTable = oTemplate_BLogic.BAL_Template_Select(oTemplate);

            MailSubject = Convert.ToString(oTable.Rows[0]["subject"]);
            MailBody = ReplaceTag(Convert.ToString(oTable.Rows[0]["body"]));
        }
    }

    /// <summary>
    /// Generate ; seprate document string for insert in database.
    /// </summary>
    /// <param name="DocumentFileList"></param>
    /// <returns></returns>
    private string GetMailDocumentString(ArrayList DocumentFileList)
    {
        string DocumentString = string.Empty;
        foreach (string document in DocumentFileList)
        {
            DocumentString += document + ";";
        }
        if (DocumentString.Length > 1)
            DocumentString = DocumentString.Substring(0, DocumentString.Length - 1);
        return DocumentString;
    }

    #endregion
}